{"version":3,"sources":["components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableRow","props","marketReturn","this","className","year","style","totalReturn","color","cumulativeTotal","toFixed","index","Component","Table","selectedRange","marketReturns","map","arr","parseFloat","App","setRange","minRange","maxRange","state","setState","min","max","handleRangeChange","values","reverse","onChange","defaultValue","value","allowCross","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAoBeA,E,kDAjBd,WAAYC,GAAQ,uCACbA,G,qDAGG,IACDC,EAAiBC,KAAKF,MAAtBC,aACR,OACC,qBAAIE,UAAU,WAAd,UACC,6BAAKF,EAAaG,OAElB,oBAAIC,MAAOJ,EAAaK,YAAc,EAAI,CAAEC,MAAO,OAAU,GAA7D,SAAkEN,EAAaK,cAC/E,oBAAID,MAAOH,KAAKF,MAAMQ,gBAAkB,EAAI,CAAED,MAAO,OAAU,GAA/D,SAAoEL,KAAKF,MAAMQ,gBAAgBC,QAAQ,OAJ1EP,KAAKF,MAAMU,W,GARrBC,aCmDRC,E,kDAjDd,WAAYZ,GAAQ,IAAD,8BAClB,cAAMA,IACDQ,gBAAkB,EAFL,E,qDAKT,IAAD,OAIR,OAFAN,KAAKM,gBAAkB,EAGtB,sBAAKL,UAAU,eAAf,UACC,mCACC,uDAA0BD,KAAKF,MAAMa,cAAc,GAAnD,YAAgEX,KAAKF,MAAMa,cAAc,MACzF,kEAED,kCACC,uBAAOV,UAAU,YAAjB,SACC,+BACC,sCACA,8CACA,wDAGF,uBAAOA,UAAU,YAAjB,SACED,KAAKF,MAAMc,cAAcC,KAAI,SAACd,EAAcS,EAAOM,GAEnD,OAAIf,EAAaG,MAAQ,EAAKJ,MAAMa,cAAc,IACjDZ,EAAaG,MAAQ,EAAKJ,MAAMa,cAAc,IAG9C,EAAKL,iBAAmBS,WAAWhB,EAAaK,aAG/C,cAAC,EAAD,CACCI,MAAOA,EACPT,aAAcA,EACdO,gBAAiB,EAAKA,mBAIlB,oB,GAzCMG,a,QCqFLO,G,wDAhFb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAcRmB,SAAW,WAET,IAAIC,EACAC,EAEJ,EAAKC,MAAMR,cAAcC,KAAI,SAACd,EAAcS,GAE7B,GAATA,IACFU,EAAWnB,EAAaG,KACxBiB,EAAWpB,EAAaG,MAEtBH,EAAaG,KAAOgB,IACtBA,EAAWnB,EAAaG,MAEtBH,EAAaG,KAAOiB,IACtBA,EAAWpB,EAAaG,SAK5B,EAAKmB,SAAS,CACZC,IAAKJ,EACLK,IAAKJ,EACLR,cAAe,CAACO,EAAUC,MAtCX,EA0CnBK,kBAAoB,SAACC,GAEnB,EAAKJ,SAAS,CACZV,cAAec,KA3CjB,EAAKL,MAAQ,CACXR,cAAeA,EACfU,IAAK,GACLC,IAAK,GACLZ,cAAe,IANA,E,gEAWjBC,EAAcc,UACd1B,KAAKiB,a,+BAqCE,MAQHjB,KAAKoB,MAJPR,EAJK,EAILA,cACAU,EALK,EAKLA,IACAC,EANK,EAMLA,IACAZ,EAPK,EAOLA,cAGF,OACE,sBAAKV,UAAU,eAAf,UACE,oBAAIA,UAAU,YAAd,uFACA,cAAC,IAAD,CACEqB,IAAKA,EACLC,IAAKA,EACLI,SAAU3B,KAAKwB,kBACfI,aAAc,CAACN,EAAKC,GACpBM,MAAO,CAAClB,EAAc,GAAIA,EAAc,IACxCmB,WAAW,QACX7B,UAAU,gBAEZ,cAAC,EAAD,CACEW,cAAeA,EACfD,cAAeA,W,GA1EPF,cCKHsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,K","file":"static/js/main.99913ec7.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TableRow extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t}\n\n\trender() {\n\t\tconst { marketReturn } = this.props\n\t\treturn (\n\t\t\t<tr className=\"tableRow\" key={this.props.index}>\n\t\t\t\t<td>{marketReturn.year}</td>\n\t\t\t\t{/* conditionally styles font color to red if value is below 0 */}\n\t\t\t\t<td style={marketReturn.totalReturn < 0 ? { color: 'red' } : {}}>{marketReturn.totalReturn}</td>\n\t\t\t\t<td style={this.props.cumulativeTotal < 0 ? { color: 'red' } : {}}>{this.props.cumulativeTotal.toFixed(2)}</td>\n\t\t\t</tr>\n\t\t)\n\t}\n}\n\nexport default TableRow","import React, { Component } from 'react'\nimport TableRow from './TableRow';\n\nclass Table extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.cumulativeTotal = 0\n\t}\n\n\trender() {\n\t\t// sets cumulative total back to 0 with new selectedRange\n\t\tthis.cumulativeTotal = 0\n\n\t\treturn (\n\t\t\t<div className=\"returnsTable\" >\n\t\t\t\t<header>\n\t\t\t\t\t<h3>Currently Displaying {this.props.selectedRange[0]} Through {this.props.selectedRange[1]}</h3>\n\t\t\t\t\t<h4>S&amp;P 500 Total Returns by Year</h4>\n\t\t\t\t</header>\n\t\t\t\t<table>\n\t\t\t\t\t<thead className=\"tableHead\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>Year</th>\n\t\t\t\t\t\t\t<th>Total Return</th>\n\t\t\t\t\t\t\t<th>Cumulative Return</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody className=\"tableBody\">\n\t\t\t\t\t\t{this.props.marketReturns.map((marketReturn, index, arr) => {\n\t\t\t\t\t\t\t// conditionally renders the current marketReturn if within selectedRange\n\t\t\t\t\t\t\tif (marketReturn.year >= this.props.selectedRange[0] &&\n\t\t\t\t\t\t\t\tmarketReturn.year <= this.props.selectedRange[1]) {\n\n\t\t\t\t\t\t\t\t// adds the totalReturn of the current marketReturn to the cumulativeTotal\n\t\t\t\t\t\t\t\tthis.cumulativeTotal += parseFloat(marketReturn.totalReturn)\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\tmarketReturn={marketReturn}\n\t\t\t\t\t\t\t\t\t\tcumulativeTotal={this.cumulativeTotal}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Table","import React, { Component } from 'react'\nimport './App.css';\nimport marketReturns from './assets/returns.json'\nimport Table from './components/Table';\nimport Slider, { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      marketReturns: marketReturns,\n      min: \"\",\n      max: \"\",\n      selectedRange: [],\n    }\n  };\n\n  componentDidMount() {\n    marketReturns.reverse()\n    this.setRange()\n  }\n\n  setRange = () => {\n    // sets min and max range for slider based on data\n    let minRange\n    let maxRange\n    // map through market return data to find the min and max years of the range\n    this.state.marketReturns.map((marketReturn, index) => {\n      // establishes minRange and maxRange to the first marketReturn \n      if (index == 0) {\n        minRange = marketReturn.year\n        maxRange = marketReturn.year\n      }\n      if (marketReturn.year < minRange) {\n        minRange = marketReturn.year\n      }\n      if (marketReturn.year > maxRange) {\n        maxRange = marketReturn.year\n      }\n      return\n    })\n    // sets min and max range values to state\n    this.setState({\n      min: minRange,\n      max: maxRange,\n      selectedRange: [minRange, maxRange]\n    })\n  }\n\n  handleRangeChange = (values) => {\n    // sets selectedRange in state based on changing range values\n    this.setState({\n      selectedRange: values\n    })\n  };\n\n  render() {\n\n    //destructuring state variables\n    const {\n      marketReturns,\n      min,\n      max,\n      selectedRange,\n    } = this.state\n\n    return (\n      <div className=\"appContainer\">\n        <h4 className=\"rangeText\">Use the Slider below to select the range of years displayed in the table.</h4>\n        <Range\n          min={min}\n          max={max}\n          onChange={this.handleRangeChange}\n          defaultValue={[min, max]}\n          value={[selectedRange[0], selectedRange[1]]}\n          allowCross='false'\n          className='rangeSlider'\n        />\n        <Table\n          marketReturns={marketReturns}\n          selectedRange={selectedRange}\n        />\n      </div >\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}