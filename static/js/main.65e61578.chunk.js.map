{"version":3,"sources":["components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableRow","props","state","marketReturn","this","className","year","style","totalReturn","color","cumulativeTotal","index","Component","Table","selectedRange","marketReturns","map","arr","parseFloat","App","setRange","minRange","maxRange","setState","min","max","filterReturns","filteredReturns","filter","displayedMarketReturns","console","log","handleRangeChange","values","reverse","defaultValue","value","onChange","allowCross","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65e61578.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TableRow extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t// this.cumulativeTotal = props.cumulativeTotal\n\t\tthis.state = {\n\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { marketReturn } = this.props\n\t\treturn (\n\t\t\t<tr className=\"tableRow\" key={this.props.index}>\n\t\t\t\t<td>{marketReturn.year}</td>\n\t\t\t\t<td style={marketReturn.totalReturn < 0 ? { color: 'red' } : {}}>{marketReturn.totalReturn}</td>\n\t\t\t\t<td style={this.props.cumulativeTotal < 0 ? { color: 'red' } : {}}>{this.props.cumulativeTotal}</td>\n\t\t\t</tr>\n\t\t)\n\t}\n}\n\nexport default TableRow","import React, { Component } from 'react'\nimport TableRow from './TableRow';\n\nclass Table extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.cumulativeTotal = 0\n\t\tthis.state = {\n\t\t\t// cumulativeTotal: 0\n\t\t}\n\t}\n\t// addCumulativeTotal = (annualReturn) => {\n\t// \tthis.setState(prevState => {\n\t// \t\treturn {\n\t// \t\t\tcumulativeTotal: prevState.cumulativeTotal + annualReturn\n\t// \t\t}\n\t// \t})\n\t// }\n\n\trender() {\n\t\tthis.cumulativeTotal = 0\n\n\t\treturn (\n\t\t\t<div className=\"returnsTable\" >\n\t\t\t\t<header>\n\t\t\t\t\t<h3>Currently Displaying {this.props.selectedRange[0]} Through {this.props.selectedRange[1]}</h3>\n\t\t\t\t\t<h4>S&P 500 Total Returns by Year</h4>\n\t\t\t\t</header>\n\t\t\t\t<table>\n\t\t\t\t\t<thead className=\"tableHead\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>Year</th>\n\t\t\t\t\t\t\t<th>Total Return</th>\n\t\t\t\t\t\t\t<th>Cumulative Return</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody className=\"tableBody\">\n\t\t\t\t\t\t{this.props.marketReturns.map((marketReturn, index, arr) => {\n\n\t\t\t\t\t\t\t// console.log('initial CT: ', this.state.cumulativeTotal)\n\t\t\t\t\t\t\tthis.cumulativeTotal += parseFloat(marketReturn.totalReturn)\n\t\t\t\t\t\t\t// this.props.addCumulativeTotal(parseInt(marketReturn.totalReturn))\n\t\t\t\t\t\t\t// cumulativeTotal += parseInt(marketReturn.totalReturn)\n\t\t\t\t\t\t\t// console.log(\"post\", this.state.cumulativeTotal)\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\tmarketReturn={marketReturn}\n\t\t\t\t\t\t\t\t\tcumulativeTotal={this.cumulativeTotal}\n\t\t\t\t\t\t\t\t// addCumulativeTotal={this.props.addCumulativeTotal}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t// <tr key={this.props.index}>\n\t\t\t\t\t\t\t\t// \t<td>{marketReturn.year}</td>\n\t\t\t\t\t\t\t\t// \t<td>{marketReturn.totalReturn}</td>\n\t\t\t\t\t\t\t\t// \t<td>{this.cumulativeTotal}</td>\n\t\t\t\t\t\t\t\t// </tr>\n\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Table","import React, { Component } from 'react'\nimport './App.css';\nimport marketReturns from './assets/returns.json'\nimport Table from './components/Table';\nimport Slider, { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\n\n//todos:\n//[X] build table structure\n//[X] order data in ascending order\n//[X] import and set up slider w/ range\n//[X] filter range values onChange\n//[X] acumulate totals for the cumulative column\n//[ ] fix off by one bug\n//[ ] add tooltip\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      marketReturns: marketReturns,\n      displayedMarketReturns: marketReturns,\n      min: \"\",\n      max: \"\",\n      selectedRange: [],\n    }\n\n  };\n\n  componentWillMount() {\n    marketReturns.reverse()\n    this.setRange()\n  }\n\n  setRange = () => {\n    // sets min and max range for slider based on data\n    let minRange\n    let maxRange\n    // map through market return data to find the min and max years of the range\n    this.state.marketReturns.map(marketReturn => {\n      if (!minRange) {\n        minRange = marketReturn.year\n      }\n      if (!maxRange) {\n        maxRange = marketReturn.year\n      }\n      if (marketReturn.year < minRange) {\n        minRange = marketReturn.year\n      }\n      if (marketReturn.year > maxRange) {\n        maxRange = marketReturn.year\n      }\n      return\n    })\n    // sets min and max range values to state\n    this.setState({\n      min: minRange,\n      max: maxRange,\n      selectedRange: [minRange, maxRange]\n    })\n  }\n  filterReturns = () => {\n    const { selectedRange, marketReturns } = this.state\n    const filteredReturns = marketReturns.filter(marketReturn => {\n      if (marketReturn.year >= selectedRange[0] && marketReturn.year <= selectedRange[1]) {\n        return true\n      }\n      return false\n    })\n    this.setState({\n      displayedMarketReturns: filteredReturns\n    })\n    console.log('first results: ', this.state.displayedMarketReturns)\n  }\n\n  handleRangeChange = (values) => {\n    // console.log('values: ', values)\n    this.setState({\n      selectedRange: values\n    })\n    this.filterReturns()\n  };\n\n\n\n  render() {\n    //destructuring state variables\n    const {\n      marketReturns,\n      min,\n      max,\n      selectedRange,\n      displayedMarketReturns,\n      // cumulativeTotal\n    } = this.state\n\n    // console.log(displayedMarketReturns)\n    console.log('second results: ', displayedMarketReturns)\n\n    return (\n      <div className=\"appContainer\">\n        <Range\n          min={min}\n          max={max}\n          defaultValue={[min, max]}\n          value={[selectedRange[0], selectedRange[1]]}\n          onChange={this.handleRangeChange}\n          allowCross='false'\n          className='rangeSlider'\n        />\n        <Table\n          marketReturns={displayedMarketReturns}\n          selectedRange={selectedRange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}